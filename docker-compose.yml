version: '3.9'

services:
  # Redis - High-performance cache
  redis:
    image: redis:7-alpine
    container_name: crypto_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 2gb --maxmemory-policy allkeys-lru
    networks:
      - crypto_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5

  # PostgreSQL - Historical data storage
  postgres:
    image: postgres:15-alpine
    container_name: crypto_postgres
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-arbitrage}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-arbitrage123}
      POSTGRES_DB: ${POSTGRES_DB:-crypto_arbitrage}
      POSTGRES_MAX_CONNECTIONS: 200
      POSTGRES_SHARED_BUFFERS: 256MB
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init_db.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - crypto_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-arbitrage}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # TimescaleDB - Time-series data (optional, for better performance)
  timescaledb:
    image: timescale/timescaledb:latest-pg15
    container_name: crypto_timescale
    environment:
      POSTGRES_USER: ${TIMESCALE_USER:-timescale}
      POSTGRES_PASSWORD: ${TIMESCALE_PASSWORD:-timescale123}
      POSTGRES_DB: ${TIMESCALE_DB:-crypto_timeseries}
    ports:
      - "5433:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
    networks:
      - crypto_network

  # Prometheus - Metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: crypto_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./deployment/monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--storage.tsdb.retention.time=30d'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - crypto_network
    depends_on:
      - api

  # Grafana - Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: crypto_grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: ${GRAFANA_USER:-admin}
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin123}
      GF_INSTALL_PLUGINS: redis-datasource,redis-app
    volumes:
      - grafana_data:/var/lib/grafana
      - ./deployment/monitoring/dashboards:/etc/grafana/provisioning/dashboards
      - ./deployment/monitoring/datasources:/etc/grafana/provisioning/datasources
    networks:
      - crypto_network
    depends_on:
      - prometheus
      - redis

  # FastAPI Application
  api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto_api
    ports:
      - "8000:8000"
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      REDIS_HOST: redis
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER:-arbitrage}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-arbitrage123}
      POSTGRES_DB: ${POSTGRES_DB:-crypto_arbitrage}
      # Exchange API keys (from .env)
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_API_SECRET: ${BINANCE_API_SECRET}
      OKX_API_KEY: ${OKX_API_KEY}
      OKX_API_SECRET: ${OKX_API_SECRET}
      OKX_PASSPHRASE: ${OKX_PASSPHRASE}
      BYBIT_API_KEY: ${BYBIT_API_KEY}
      BYBIT_API_SECRET: ${BYBIT_API_SECRET}
      KUCOIN_API_KEY: ${KUCOIN_API_KEY}
      KUCOIN_API_SECRET: ${KUCOIN_API_SECRET}
      KUCOIN_PASSPHRASE: ${KUCOIN_PASSPHRASE}
      HTX_API_KEY: ${HTX_API_KEY}
      HTX_API_SECRET: ${HTX_API_SECRET}
    volumes:
      - ./:/app
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - crypto_network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Arbitrage Engine - Main trading engine
  arbitrage_engine:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto_engine
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      REDIS_HOST: redis
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER:-arbitrage}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-arbitrage123}
      POSTGRES_DB: ${POSTGRES_DB:-crypto_arbitrage}
      # Exchange API keys
      BINANCE_API_KEY: ${BINANCE_API_KEY}
      BINANCE_API_SECRET: ${BINANCE_API_SECRET}
      OKX_API_KEY: ${OKX_API_KEY}
      OKX_API_SECRET: ${OKX_API_SECRET}
      OKX_PASSPHRASE: ${OKX_PASSPHRASE}
      BYBIT_API_KEY: ${BYBIT_API_KEY}
      BYBIT_API_SECRET: ${BYBIT_API_SECRET}
      KUCOIN_API_KEY: ${KUCOIN_API_KEY}
      KUCOIN_API_SECRET: ${KUCOIN_API_SECRET}
      KUCOIN_PASSPHRASE: ${KUCOIN_PASSPHRASE}
      HTX_API_KEY: ${HTX_API_KEY}
      HTX_API_SECRET: ${HTX_API_SECRET}
    command: python main.py --mode=arbitrage
    volumes:
      - ./:/app
      - ./data:/app/data
      - ./logs:/app/logs
    networks:
      - crypto_network
    depends_on:
      redis:
        condition: service_healthy
      postgres:
        condition: service_healthy
      api:
        condition: service_healthy
    restart: unless-stopped

  # ML Training Service (periodic retraining)
  ml_trainer:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: crypto_ml_trainer
    environment:
      ENVIRONMENT: ${ENVIRONMENT:-production}
      REDIS_HOST: redis
      POSTGRES_HOST: postgres
      POSTGRES_USER: ${POSTGRES_USER:-arbitrage}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-arbitrage123}
      POSTGRES_DB: ${POSTGRES_DB:-crypto_arbitrage}
    command: python scripts/train_ensemble.py --schedule=daily
    volumes:
      - ./:/app
      - ./data:/app/data
      - ./data/models:/app/data/models
    networks:
      - crypto_network
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Jupyter Lab for analysis (development only)
  jupyter:
    build:
      context: .
      dockerfile: Dockerfile.jupyter
    container_name: crypto_jupyter
    ports:
      - "8888:8888"
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: ${JUPYTER_TOKEN:-crypto123}
    volumes:
      - ./:/app
      - ./notebooks:/app/notebooks
      - ./data:/app/data
    networks:
      - crypto_network
    profiles:
      - development

  # Redis Commander (development only)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: crypto_redis_commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - crypto_network
    depends_on:
      - redis
    profiles:
      - development

  # pgAdmin (development only)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: crypto_pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_EMAIL:-admin@crypto.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_PASSWORD:-admin123}
    ports:
      - "5050:80"
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - crypto_network
    depends_on:
      - postgres
    profiles:
      - development

  # Nginx Reverse Proxy (production only)
  nginx:
    image: nginx:alpine
    container_name: crypto_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./deployment/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./deployment/nginx/ssl:/etc/nginx/ssl
    networks:
      - crypto_network
    depends_on:
      - api
      - grafana
    profiles:
      - production

networks:
  crypto_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  timescale_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  pgadmin_data:
    driver: local

# Health check configuration
x-healthcheck-defaults: &healthcheck-defaults
  interval: 30s
  timeout: 10s
  retries: 3
  start_period: 40s